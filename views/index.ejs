<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SHEETS API NODE JS</title>

    <!-- BOOTSTRAP -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>

    <!-- OTHER -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar navbar-dark bg-primary">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">ADD STUFF</a>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                </ul>
            </div>
        </div>
        </nav><br><br>
    <div class="container">
        <div class="card">
            <div class="card-header">
            Add a new item
            </div>
            <div class="card-body">
                <form id="sheet-form" class="needs-validation form-horizontal " novalidate>

                    <!-- ========= Required fields ========= -->
                    <div class="form-group mb-3 validate-me">
                        <label>Item</label>
                        <input type="text" class="form-control" id="item" name="item" placeholder="Item name" required>
                    </div>

                    <div class="form-group mb-3 validate-me">
                        <label>Type</label>
                        <select class="form-select" id="type" name="type" required>
                            <% for(var i=0; i < expenseTypes.length; i++) { %>
                                <option value='<%= expenseTypes[i] %>'><%= expenseTypes[i] %></option>
                            <% } %>
                        </select>
                    </div>

                    <div class="form-group mb-3 validate-me">
                        <label>Currency</label>
                        <select class="form-select" id="currency" name="currency" required>
                            <% Object.keys(currencies).forEach(function(prop) { %>
                                <option value='<%- prop %>'><%- currencies[prop] %></option>
                            <% }); %>
                        </select>
                    </div>

                    <div class="form-group mb-3 validate-me">
                        <label>Amount</label>
                        <input type="number" class="form-control" id="amount" name="amount" required>
                    </div>

                    <!-- ========= Optional fields ========= -->
                    <hr>
                    <div class="form-group mb-3 validate-me">
                        <label>Notes</label>
                        <input type="text" class="form-control" id="notes" name="notes" placeholder="Notes">
                    </div>

                    <div class="form-group mb-3">
                        <label>Location</label><br>
                        <input type="text" class="form-control" id="location" name="location" placeholder="Location">
                        <input class="form-check-input" type="checkbox" id="set-gps">
                        <label class="form-check-label" for="set-gps">
                            Add GPS coords
                        </label>
                        <p style="font-style: italic;" id="gps-info"></p>
                    </div>

                    <div class="form-group mb-3 validate-me">
                        <label>Beginning</label>
                        <div class="input-group date">
                            <input type="date" name="beginning" id="beginning" class="form-control">
                        </div>
                    </div>

                    <div class="form-group mb-3 validate-me">
                        <label>End</label>
                        <div class="input-group date">
                            <input type="date" name="end" id="end" class="form-control">
                        </div>
                    </div>

                    <br>
                    <!-- <button type="button" class="btn btn-primary" id="submitButton">Submit</button> -->
                    <button class="btn btn-primary" id="submitButton">Submit</button>
                    <button type="reset" class="btn btn-secondary" onclick="resetForm()">Reset</button>
                    <p id="resultMessage"></p>
                </form>
            </div>
        </div>
    </div>

    <!-- Supplemental scripts -->
    <script>
        const dateFormat = "dd.mm.yyyy";

        var checkbox = document.getElementById("set-gps");
        var notes = document.getElementById("notes");

        function resetForm() {
            notes.disabled = false
            $("#gps-info").html('')
            $("#gps-info").attr("class", '');
            $("#location").prop("disabled", false)

            // Remove validations
            for (var i = 0; i < validateGroup.length; i++) {
                validateGroup[i].classList.remove('was-validated');
            }
        }

        function updateGpsInfo(text, isWarning, clear) {
            const gpsInfo = $("#gps-info");
            if (clear) {
                gpsInfo.html('');
                gpsInfo.attr("class", '');
                return
            }

            gpsInfo.html(text);
            if (isWarning) {
                gpsInfo.attr("class", "alert alert-danger");
            } else {
                gpsInfo.attr("class", "alert alert-success");
            }
        }

        var locationValue = null;

        $(document).ready(function () {
            // GPS stuff
            $("#set-gps").prop("checked", false)

            function unlockAndGetLocationText() {
                $("#location").prop("disabled", false)
                return $("#location").val()
            }

            $("#set-gps").click(function () {
                $("#location").prop("disabled", $("#set-gps").is(":checked"))

                if ($("#set-gps").is(":checked")) {
                    $('#submitButton').prop('disabled', true)

                    try {
                        if ("geolocation" in navigator) {
                            // Start spinner
                            $("#gps-info").html('<div class="alert alert-info"><span class="spinner-border spinner-border-sm"></span>&ensp;Obtaining position...</div>')
                            locationValue = ""

                            navigator.geolocation.getCurrentPosition(function (position) {
                                const latitude = position.coords.latitude;
                                const longitude = position.coords.longitude;
                                locationValue = latitude + ", " + longitude;
                                updateGpsInfo(locationValue)
                            }, (error) => {
                                // Disable thing
                                $("#set-gps").prop("checked", false)
                                updateGpsInfo(error.message, true)
                                locationValue = unlockAndGetLocationText()

                            });
                        } else {
                            // Get location text data instead
                            updateGpsInfo("Geolocation unavailable.", true);
                            locationValue = $("#location").val()
                        }
                    } catch (error) {
                        // Get location text data instead
                        console.error("Unhandled exception:", error)
                        $locationValue = unlockAndGetLocationText()
                    } finally {
                        $('#submitButton').attr('disabled', false)
                    }
                } else {
                    updateGpsInfo(null, false, true) // Clear
                    locationValue = unlockAndGetLocationText()
                }
            });

            // Disable form auto navigation
            var form = document.getElementById('sheet-form')
            var validateGroup = document.getElementsByClassName('validate-me');
            form.addEventListener('submit', function (event) {
                    event.preventDefault()
            })

            // POSTing
            $('#submitButton').click(async () => {
                // Prepare spinner and resultmessage
                $('#submitButton').prop("disabled", true)
                $('#submitButton').html('<span class="spinner-border spinner-border-sm"></span>')
                $('#resultMessage').html('')
                $('#resultMessage').attr("class", '')

                try {
                    console.info("Preparing to POST form...")

                    if (!form.checkValidity()) {
                        throw "Form validation did not pass"
                    }
    
                    const formData = {
                        // Required
                        item: $('#item').val(),
                        type: $('#type').val(),
                        date: moment().format("DD.MM.YYYY"),
                        currency: $('#currency').val(),
                        amount: $('#amount').val(),
    
                        // Optionals
                        notes: $('#notes').val(),
                        beginning: $('#beginning').val(),
                        end: $('#end').val(),

                        // Prevent locationValue being potentially null because set-gps is not checked
                        location: $("#set-gps").is(":checked") ? locationValue : $('#location').val()
                    };
            
                    const jsonData = JSON.stringify(formData);
                    console.info("jsonData:", jsonData)
            
                    await fetch('/sheet', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: jsonData,
                    })
                        .then(response => {
                            if (!response.ok) {
                                $('#resultMessage').attr("class", "alert alert-danger");                                
                            } else {
                                $('#resultMessage').attr("class", "alert alert-success");
                            }

                            return response.json()
                        })
                        .then(data => {
                            let formattedResponse = '';
                            console.log(data)
                            for (const key in data) {
                                formattedResponse += `${key}: ${data[key]}\n`;
                            }

                            console.info(formattedResponse)
                            $('#resultMessage').html(formattedResponse);
                        })
                        .catch(error => {
                            const resultMessage = `Fatal error: ${error}`;
                            console.error(resultMessage);

                            $('#resultMessage').attr("class", "alert alert-danger");
                            $('#resultMessage').html(resultMessage);
                        });
                } catch (error) {
                    console.error("submitButton error", error)
                } finally {
                    // Reset submit
                    $('#submitButton').html('Submit')
                    $('#submitButton').prop("disabled", false)

                    //Added validation class to all form-groups in need of validation
                    for (var i = 0; i < validateGroup.length; i++) {
                        validateGroup[i].classList.add('was-validated');
                    }
                }
            });
        });
    </script>
</body>
</html>